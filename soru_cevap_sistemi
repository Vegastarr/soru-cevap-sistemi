{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOaEXZb2TkLbX/kLi/PnJhx",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Vegastarr/soru-cevap-sistemi/blob/main/soru_cevap_sistemi\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install sentence-transformers"
      ],
      "metadata": {
        "id": "4vOaCYOtuGuu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install langchain-community"
      ],
      "metadata": {
        "id": "MzelwPX2sQgX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pandas faker numpy torch transformers faiss-cpu langchain"
      ],
      "metadata": {
        "id": "X81hm7-1ib3W"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "with open('log_vectorizer.py', 'w') as f:\n",
        "    f.write(\"\"\"\n",
        "import os\n",
        "import pickle\n",
        "import faiss\n",
        "from langchain.document_loaders import TextLoader\n",
        "from langchain.text_splitter import RecursiveCharacterTextSplitter\n",
        "from langchain.vectorstores.faiss import FAISS\n",
        "from langchain.embeddings import HuggingFaceBgeEmbeddings\n",
        "\n",
        "class LogVectorizer():\n",
        "    def __init__(self, text_file=\"data.txt\", index_file=\"faiss_index\"):\n",
        "        self.text_file = text_file   # Verilerin kaydedileceği metin dosyası.\n",
        "        self.index_file = index_file   # FAISS indeks dosyası.\n",
        "\n",
        "    def convert_it_to_text(self, df):\n",
        "        if 'text' in df.columns:\n",
        "            with open(self.text_file, \"w\") as file:\n",
        "                for text in df[\"text\"]:\n",
        "                    file.write(str(text) + \"\\\\n\")\n",
        "        else:\n",
        "            print(\"The 'text' column does not exist in the DataFrame.\")\n",
        "\n",
        "    def split_it(self, path=None):\n",
        "        if path is None:\n",
        "            path = self.text_file\n",
        "\n",
        "        loader = TextLoader(path)  # Dosyayı yükle.\n",
        "        data = loader.load()\n",
        "\n",
        "        text_splitter = RecursiveCharacterTextSplitter(\n",
        "            chunk_size=250,   # Bölümlerin boyutu\n",
        "            chunk_overlap=0,\n",
        "            length_function=len\n",
        "        )\n",
        "\n",
        "        documents = text_splitter.split_documents(data)\n",
        "        return documents\n",
        "\n",
        "    def create_and_save_faiss_index(self, documents, embedding_model=HuggingFaceBgeEmbeddings):\n",
        "        embeddings = embedding_model()\n",
        "        faiss_index = FAISS.from_documents(documents, embeddings)\n",
        "\n",
        "        faiss.write_index(faiss_index.index, self.index_file)  # FAISS indeksini kaydet.\n",
        "\n",
        "    def load_faiss_index(self):\n",
        "        index = faiss.read_index(self.index_file)\n",
        "        return index   # Kaydedilmiş FAISS indeksini yükle.\n",
        "\"\"\")"
      ],
      "metadata": {
        "id": "eZnCDkVGrq3u"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "with open('response_generator.py', 'w') as f:\n",
        "    f.write(\"\"\"\n",
        "import torch\n",
        "from transformers import GPT2Tokenizer, GPT2LMHeadModel\n",
        "\n",
        "class ResponseGenerator():\n",
        "    def __init__(self, model_name=\"gpt2\"):\n",
        "        self.tokenizer = GPT2Tokenizer.from_pretrained(model_name)  # GPT2 tokenizer'ını başlatır\n",
        "        self.model = GPT2LMHeadModel.from_pretrained(model_name)  # GPT2 modelini yükler.\n",
        "\n",
        "    def generate_response(self, question, context, max_length=200, num_beams=8, early_stopping=True):\n",
        "        input_text = f\"{context} {question}\"  # Soru ve bağlamı birleştirir.\n",
        "        input_ids = self.tokenizer.encode(input_text, return_tensors=\"pt\")  # Metni kodlar.\n",
        "\n",
        "        with torch.no_grad():\n",
        "            output_ids = self.model.generate(input_ids, max_length=max_length, num_beams=num_beams, early_stopping=early_stopping)\n",
        "\n",
        "        answer = self.tokenizer.decode(output_ids[0], skip_special_tokens=True)  # Yanıtı çözer.\n",
        "        return answer\n",
        "\"\"\")"
      ],
      "metadata": {
        "id": "pn36gQedrx1q"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def give_us_answer(self, question, top_k=1):\n",
        "    vectorDB = self.vectorizer.load_faiss_index()\n",
        "    embedding_model = HuggingFaceBgeEmbeddings()\n",
        "\n",
        "    question_embedding = embedding_model.embed_documents([question])[0]\n",
        "    question_embedding = np.array(question_embedding).astype(np.float32).reshape(1, -1)\n",
        "\n",
        "    distances, indices = vectorDB.search(question_embedding, top_k)\n",
        "\n",
        "    documents = self.vectorizer.split_it()\n",
        "    if len(indices) == 0 or indices[0][0] >= len(documents):\n",
        "        context = \"No relevant context found.\"\n",
        "    else:\n",
        "        context = documents[indices[0][0]].page_content\n",
        "\n",
        "    response = self.gen_response.generate_response(question=question, context=context)\n",
        "    return response"
      ],
      "metadata": {
        "id": "IKXl5fdq9yHN"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Gerekli kütüphaneler\n",
        "import pandas as pd\n",
        "from faker import Faker\n",
        "import random\n",
        "\n",
        "# Sahte veri dosyasını oluşturma\n",
        "fake = Faker()\n",
        "\n",
        "with open(\"data.txt\", \"w\") as file:\n",
        "    for _ in range(1000):  # 1000 satırlık sahte veri oluşturuluyor\n",
        "        file.write(fake.text() + \"\\n\")\n",
        "\n",
        "def generate_log_data(num_rows=1000):\n",
        "    log_data = []\n",
        "    for _ in range(num_rows):\n",
        "        ip_address = fake.ipv4()\n",
        "        timestamp = fake.date_time_this_year().strftime('%Y-%m-%d %H:%M:%S')\n",
        "        request_type = random.choice(['GET', 'POST', 'DELETE', 'PUT'])\n",
        "        resource = f\"/{fake.word()}/{fake.word()}/\"\n",
        "        status_code = random.choice([200, 301, 404, 500])\n",
        "        response_size = random.randint(100, 5000)\n",
        "        user_agent = fake.user_agent()\n",
        "\n",
        "        log_data.append([ip_address, timestamp, request_type, resource, status_code, response_size, user_agent])\n",
        "\n",
        "    log_df = pd.DataFrame(log_data, columns=[\"ip_address\", \"timestamp\", \"request_type\", \"resource\", \"status_code\", \"response_size\", \"user_agent\"])\n",
        "    return log_df\n",
        "\n",
        "# Sahte veri setini oluştur ve CSV olarak kaydet\n",
        "log_df = generate_log_data(1000)\n",
        "log_df.to_csv(\"fake_web_logs.csv\", index=False)\n",
        "print(\"Sahte log verileri başarıyla oluşturuldu ve 'fake_web_logs.csv' dosyasına kaydedildi.\")\n",
        "\n",
        "\n",
        "# FAISS için gerekli kütüphaneler\n",
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "from log_vectorizer import LogVectorizer\n",
        "from response_generator import ResponseGenerator\n",
        "import numpy as np\n",
        "from langchain.embeddings import HuggingFaceBgeEmbeddings\n",
        "\n",
        "# System sınıfı - Verileri işleyip FAISS indeksi oluşturma ve soru-cevap sistemi\n",
        "class System():\n",
        "    def __init__(self, text_file=\"data.txt\", index_file=\"faiss_index\", model_name=\"gpt2\"):\n",
        "        self.vectorizer = LogVectorizer(text_file=text_file, index_file=index_file)\n",
        "        self.gen_response = ResponseGenerator(model_name=model_name)\n",
        "\n",
        "    def process_and_index_data(self, df):\n",
        "        self.vectorizer.convert_it_to_text(df)  # Veriyi metin dosyasına çevir\n",
        "        documents = self.vectorizer.split_it()  # Metni parçalara ayır\n",
        "\n",
        "        self.vectorizer.create_and_save_faiss_index(documents)\n",
        "\n",
        "    def give_us_answer(self, question, top_k=1):\n",
        "        vectorDB = self.vectorizer.load_faiss_index()  # FAISS indeksini yükle\n",
        "        embedding_model = HuggingFaceBgeEmbeddings()  # Embedding modelini başlat\n",
        "\n",
        "        question_embedding = embedding_model.embed_documents([question])[0]\n",
        "        question_embedding = np.array(question_embedding).astype(np.float32).reshape(1, -1)\n",
        "\n",
        "        distances, indices = vectorDB.search(question_embedding, top_k)\n",
        "\n",
        "        documents = self.vectorizer.split_it()\n",
        "        if indices[0][0] >= len(documents):\n",
        "            context = \"No relevant context found.\"\n",
        "        else:\n",
        "            context = documents[indices[0][0]].page_content\n",
        "\n",
        "        response = self.gen_response.generate_response(question=question, context=context)\n",
        "        return response\n",
        "\n",
        "# GPT-2 modelini kullanarak yanıt oluşturma\n",
        "import torch\n",
        "from transformers import GPT2Tokenizer, GPT2LMHeadModel\n",
        "\n",
        "class ResponseGenerator():\n",
        "    def __init__(self, model_name=\"gpt2\"):\n",
        "        self.tokenizer = GPT2Tokenizer.from_pretrained(model_name)\n",
        "        self.model = GPT2LMHeadModel.from_pretrained(model_name)\n",
        "        self.tokenizer.pad_token_id = self.tokenizer.eos_token_id\n",
        "\n",
        "    def generate_response(self, question, context, max_length=200):\n",
        "        input_text = f\"{context} {question}\"  # Bağlamı ve soruyu birleştir\n",
        "        input_ids = self.tokenizer.encode(input_text, return_tensors=\"pt\")\n",
        "\n",
        "        with torch.no_grad():\n",
        "            output_ids = self.model.generate(input_ids, max_length=max_length, pad_token_id=self.tokenizer.pad_token_id)\n",
        "\n",
        "        answer = self.tokenizer.decode(output_ids[0], skip_special_tokens=True)\n",
        "        return answer\n",
        "\n",
        "# Log verilerini işlemek için sınıf\n",
        "import os\n",
        "import pickle\n",
        "import faiss\n",
        "from langchain.document_loaders import TextLoader\n",
        "from langchain.text_splitter import RecursiveCharacterTextSplitter\n",
        "from langchain.vectorstores.faiss import FAISS\n",
        "from langchain.embeddings import HuggingFaceBgeEmbeddings\n",
        "from langchain.schema import Document  # Bu eklendi\n",
        "\n",
        "class LogVectorizer():\n",
        "    def __init__(self, text_file=\"data.txt\", index_file=\"faiss_index\"):\n",
        "        self.text_file = text_file   # Metin dosyasının adı\n",
        "        self.index_file = index_file   # FAISS indeks dosyasının adı\n",
        "\n",
        "    def convert_it_to_text(self, df):\n",
        "        if 'text' in df.columns:\n",
        "            with open(self.text_file, \"w\") as file:\n",
        "                for text in df[\"text\"]:\n",
        "                    file.write(str(text) + \"\\n\")\n",
        "        else:\n",
        "            print(\"The 'text' column does not exist in the DataFrame. Using 'user_agent' instead.\")\n",
        "            with open(self.text_file, \"w\") as file:\n",
        "                for user_agent in df[\"user_agent\"]:\n",
        "                    file.write(str(user_agent) + \"\\n\")\n",
        "\n",
        "    def split_it(self, path=None):\n",
        "        if path is None:\n",
        "            path = self.text_file\n",
        "\n",
        "        loader = TextLoader(path)\n",
        "        data = loader.load()\n",
        "\n",
        "        text_splitter = RecursiveCharacterTextSplitter(\n",
        "            chunk_size=250,            chunk_overlap=0,\n",
        "            length_function=len\n",
        "        )\n",
        "\n",
        "        documents = text_splitter.split_documents(data)\n",
        "        return documents\n",
        "\n",
        "    def create_and_save_faiss_index(self, documents, embedding_model=HuggingFaceBgeEmbeddings):\n",
        "        embeddings = embedding_model()\n",
        "        faiss_index = FAISS.from_documents(documents, embeddings)\n",
        "\n",
        "        faiss.write_index(faiss_index.index, self.index_file)\n",
        "\n",
        "    def load_faiss_index(self):\n",
        "        index = faiss.read_index(self.index_file)\n",
        "        return index\n",
        "\n",
        "# Ana fonksiyon\n",
        "def main():\n",
        "    # Sahte veri setini yükle\n",
        "    df = pd.read_csv(\"fake_web_logs.csv\")\n",
        "\n",
        "    # Sistem sınıfını başlat\n",
        "    system = System()\n",
        "\n",
        "    # Veriyi işleyip indeksi oluştur\n",
        "    print(\"Veri işleme ve indeks oluşturma işlemi başlıyor...\")\n",
        "\n",
        "    # Eğer 'text' sütunu yoksa, başka bir sütunu kullan\n",
        "    if 'text' not in df.columns:\n",
        "        df['text'] = df['user_agent']\n",
        "\n",
        "    system.process_and_index_data(df)\n",
        "\n",
        "    print(\"Veri işleme ve indeks oluşturma tamamlandı.\")\n",
        "\n",
        "    # Soru-cevap sistemiyle bir soru sor\n",
        "    question = \"Where did ip 10.216.113.172 get 15779 datas from at 02:51 am\"\n",
        "    print(f\"Soru: {question}\")\n",
        "\n",
        "    answer = system.give_us_answer(question)\n",
        "    print(f\"Cevap: {answer}\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "id": "CC9Sg4SJ538c"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}